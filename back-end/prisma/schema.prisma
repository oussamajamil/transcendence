generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Relation {
  id              String        @id @default(uuid())

  type            RelationType
  user            User          @relation("relations", fields: [userId], references: [id])
  userId          String        @map("user_id")
  relationWith    User          @relation("relation_with", fields: [relationWithId], references: [id])
  relationWithId  String        @map("relation_with_id")

  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("relations")
}

model MatchHistory {
  id          String      @id @default(uuid())
  winnerScore Int         @map("winner_score")
  loserScore  Int         @map("loser_score")
  winner      User        @relation("winner", fields: [winnerId], references: [id])
  winnerId    String      @map("winner_id")
  loser       User        @relation("loser", fields: [loserId], references: [id])
  loserId     String      @map("loser_id")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")
  @@map("match_history")
}

model Channel {
  id        String         @id @default(uuid())
  name      String         // @unique
  password  String?

  messages  Message[]     @relation("channel_messages")
  members   Membership[]  @relation("members")
  type      ChannelType
  owner     User?         @relation("channel_owner",fields: [ownerId], references: [id])
  ownerId   String?       @map("owner_id")

  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("channels")
}

model Membership {
  user        User            @relation("channel_member",fields: [userId], references: [id])
  userId      String          @map("user_id")
  channel     Channel         @relation("members",fields: [channelId], references: [id])
  channelId   String          @map("channel_id")
  type        MembershipType
  status      MembershipStatus
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")
  @@id([userId, channelId])
  @@map("memberships")
}

model User {
  id              String              @id @default(uuid())
  login           String              @unique
  avatar          String?
  level           Int                 @default(0)
  exp             Int                 @default(0)
  points          Int                 @default(0)
  
  relations       Relation[]          @relation("relations")
  relationsWith   Relation[]          @relation("relation_with")
  winHistory      MatchHistory[]      @relation("winner")
  loseHistory     MatchHistory[]      @relation("loser")
  ownedChannels   Channel[]           @relation("channel_owner")
  membership      Membership[]        @relation("channel_member")
  messages        Message[]           @relation("user_messages")
  achievements    AchievementProgress[]
  rank            Rank?                @relation(fields: [rankId], references: [id])
  rankId          String?              @map("rank_id")

  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Message {
  id          String      @id @default(uuid())
  content     String

  channel     Channel     @relation("channel_messages",fields: [groupId], references: [id])
  groupId     String      @map("group_id")
  user        User        @relation("user_messages",fields: [userId], references: [id])
  userId      String      @map("user_id")

  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at")

  @@map("messages")
}

model Achievement {
  id          String            @id @default(uuid())
  name        String            @db.VarChar(100)
  mission     String            @db.VarChar(250)
  image       String            @db.VarChar(250)

  users       AchievementProgress[]           

    createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("achievements")
}

model AchievementProgress {
  id              String              @id @default(uuid())

  status          AchievementStatus
  user            User                @relation(fields: [userId], references: [id])
  userId          String              @map("user_id")
  achievement     Achievement         @relation(fields: [achievementId], references: [id])
  achievementId   String              @map("achievement_id")
  progress        Int                 @default(0)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("achievement_progress")
}

model Rank{
  id String @id @default(uuid())
  name String @unique
  requiredPoints Int @map("required_points")
  emblem String? 
  border String?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")
  users User[]

  @@map("ranks")
}

enum RelationType {
  FRIEND
  PENDING
  BLOCKED
}

enum AchievementStatus {
  DONE
  INPROGRESS
}

enum ChannelType {
  PUBLIC
  PRIVATE
  PROTECTED
  DM
}

enum MembershipType {
  ADMIN
  MEMBER
}

enum MembershipStatus {
  ACTIVE
  SUSPENDED
  KICKED
  MUTED
}