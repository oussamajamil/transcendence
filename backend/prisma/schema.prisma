generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  login        String        @unique
  exp          Int           @default(0)
  avatar       String?
  friends      Friend[]      @relation("friends")
  friendsBy    Friend[]      @relation("friends_by")
  messages     Message[]
  createdAt    DateTime      @default(now()) @map("created_at")
  wonHistory   History[]     @relation("winner")
  lostHistory  History[]     @relation("loser")
  achievements Achievement[]
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  groups       UserGroup[]
  ownedGroup   Group[]

  @@map("users")
}

model UserGroup {
  user     User          @relation(fields: [userId], references: [id])
  userId   Int
  group    Group         @relation(fields: [groupsId], references: [id])
  groupsId Int
  type     GroupUserType

  @@id([userId, groupsId])
  @@map("user_group")
}

model Group {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  type      GroupType
  password  String?
  messages  Message[]
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @updatedAt @map("updated_at")
  userGroup UserGroup[]
  owner     User?       @relation(fields: [ownerId], references: [id])
  ownerId   Int?

  @@map("groups")
}

model Friend {
  id         Int        @id @default(autoincrement())
  type       TypeFriend
  friendId   Int        @map("friend_id")
  friend     User       @relation("friends", fields: [friendId], references: [id])
  friendById Int
  friendBy   User       @relation("friends_by", fields: [friendById], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  groupId   Int      @map("group_id")
  group     Group    @relation(fields: [groupId], references: [id])
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("messages")
}

model History {
  id          Int      @id @default(autoincrement())
  winnerId    Int
  winner      User     @relation("winner", fields: [winnerId], references: [id])
  loserId     Int
  loser       User     @relation("loser", fields: [loserId], references: [id])
  winnerScore Int
  loserScore  Int
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("history")
}

model Achievement {
  id          Int            @id @default(autoincrement())
  userId      Int
  user        User           @relation(fields: [userId], references: [id])
  name        String         @db.VarChar(100)
  status      TypeAchievment
  description String         @db.VarChar(250)
  createdAt   DateTime       @default(now()) @map("created_at")

  @@unique([userId, name])
  @@map("achievements")
}

enum TypeFriend {
  Friend
  INVITATION
  BLOCKED
}

enum TypeAchievment {
  DONE
  INPROGRESS
}

enum GroupType {
  PUBLIC
  PRIVATE
  PROTECTED
  DM
}

enum GroupUserType {
  ADMIN
  MEMBER
}